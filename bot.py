import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from sqlalchemy.orm import Session
from database import SessionLocal, User, Purchase
import qrcode
from datetime import datetime
import random
import string
from dotenv import load_dotenv
from io import BytesIO
from PIL import Image
import cv2
import numpy as np
from pyzbar.pyzbar import decode
import asyncio

load_dotenv()

# Configure logging with more detailed format
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å INFO –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
)

logger = logging.getLogger(__name__)

# Bot token
TOKEN = "7822698775:AAFqP42YD5nsKIrkrQ54h4ZD-kSJX2VXhHA"

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [885843500]  # –í–∞—à ID —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω

def get_user_keyboard(is_admin: bool):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
    ]
    if is_admin:
        keyboard.extend([
            [KeyboardButton("üéØ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR"), KeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å QR")],
            [KeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
        ])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫"""
    text = update.message.text
    
    if text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await status(update, context)
    elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await profile(update, context)
    elif text == "üéØ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR":
        await scan(update, context)
    elif text == "‚ú® –°–æ–∑–¥–∞—Ç—å QR":
        if not context.args:
            context.args = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        await generate(update, context)
    elif text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        if not context.args:
            context.args = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        await broadcast(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = update.effective_user
    
    # Check if user exists in database
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    if not db_user:
        db_user = User(
            telegram_id=user.id,
            username=user.username,
            purchases_count=0
        )
        db.add(db_user)
        db.commit()
    
    is_admin = user.id in ADMIN_IDS
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = get_user_keyboard(is_admin)
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–í–∞—à Telegram ID: {user.id}\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –∫–∞–ª—å—è–Ω–æ–≤ —Ç–∞–π–º –∫–∞—Ñ–µ Dungeon!\n"
        "–ö–∞–∂–¥—ã–π 6-–π –∫–∞–ª—å—è–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π! üéâ\n\n"
        f"–£ –≤–∞—Å —Å–µ–π—á–∞—Å {db_user.purchases_count} –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    )
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ QR-–∫–æ–¥–∞
    active_qr = db.query(Purchase).filter(
        Purchase.user_id == db_user.id,
        Purchase.verified == False
    ).first()
    
    if not active_qr:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π QR-–∫–æ–¥
        qr_code_data = generate_qr_code()
        is_free = (db_user.purchases_count + 1) % 6 == 0
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
        purchase = Purchase(
            user_id=db_user.id,
            qr_code=qr_code_data,
            is_free=is_free
        )
        db.add(purchase)
        db.commit()
        
        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(qr_code_data)
        qr.make(fit=True)
        qr_image = qr.make_image(fill_color="black", back_color="white")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        bio = BytesIO()
        qr_image.save(bio, 'PNG')
        bio.seek(0)
        
        await update.message.reply_photo(
            photo=bio,
            caption=f"–í–∞—à {'üéÅ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π' if is_free else 'üí∞ –æ–±—ã—á–Ω—ã–π'} QR-–∫–æ–¥ –≥–æ—Ç–æ–≤!\n"
                    "–ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ."
        )
    
    db.close()

async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ü—Ä–∏–º–µ—Ä: /generate 123456789"
        )
        return
    
    try:
        user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    db = SessionLocal()
    user = db.query(User).filter(User.telegram_id == user_id).first()
    
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ QR-–∫–æ–¥—ã
    active_qr = db.query(Purchase).filter(
        Purchase.user_id == user.id,
        Purchase.verified == False
    ).first()
    
    if active_qr:
        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(active_qr.qr_code)
        qr.make(fit=True)
        qr_image = qr.make_image(fill_color="black", back_color="white")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        bio = BytesIO()
        qr_image.save(bio, 'PNG')
        bio.seek(0)
        
        await update.message.reply_photo(
            photo=bio,
            caption=f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π {'–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π' if active_qr.is_free else '–æ–±—ã—á–Ω—ã–π'} QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        db.close()
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π QR-–∫–æ–¥
    qr_code_data = generate_qr_code()
    
    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(qr_code_data)
    qr.make(fit=True)
    qr_image = qr.make_image(fill_color="black", back_color="white")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    bio = BytesIO()
    qr_image.save(bio, 'PNG')
    bio.seek(0)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
    is_free = (user.purchases_count + 1) % 6 == 0
    purchase = Purchase(
        user_id=user.id,
        qr_code=qr_code_data,
        is_free=is_free
    )
    db.add(purchase)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.purchases_count += 1
    if is_free:
        user.total_free_hookahs += 1
    
    db.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –≤ —á–∞—Ç
    await update.message.reply_photo(
        photo=bio,
        caption=f"{'üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π' if is_free else 'üí∞ –û–±—ã—á–Ω—ã–π'} QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π {'–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π' if is_free else '–æ–±—ã—á–Ω—ã–π'} QR-–∫–æ–¥!\n"
                 f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ: http://localhost:8000/guest/{user_id}"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    db.close()

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
    
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        db.close()
        return
    
    purchases_until_free = 6 - (user.purchases_count % 6)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥
    active_qr = db.query(Purchase).filter(
        Purchase.user_id == user.id,
        Purchase.verified == False
    ).first()
    
    qr_status = "\n\n‚ú® –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ." if active_qr else ""
    
    await update.message.reply_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üî∏ –ö—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤: {user.purchases_count}\n"
        f"üéÅ –ü–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤: {user.total_free_hookahs}\n"
        f"üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞: {purchases_until_free}"
        f"{qr_status}"
    )
    db.close()

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    profile_url = f"http://localhost:8000/guest/{user_id}"
    
    db = SessionLocal()
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥
    active_qr = db.query(Purchase).filter(
        Purchase.user_id == db.query(User).filter(User.telegram_id == user_id).first().id,
        Purchase.verified == False
    ).first()
    
    if active_qr:
        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(active_qr.qr_code)
        qr.make(fit=True)
        qr_image = qr.make_image(fill_color="black", back_color="white")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        bio = BytesIO()
        qr_image.save(bio, 'PNG')
        bio.seek(0)
        
        await update.message.reply_photo(
            photo=bio,
            caption=f"–í–∞—à —Ç–µ–∫—É—â–∏–π {'–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π' if active_qr.is_free else '–æ–±—ã—á–Ω—ã–π'} QR-–∫–æ–¥.\n\n"
                    f"üåê –í–µ–±-–≤–µ—Ä—Å–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:\n{profile_url}"
        )
    else:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö QR-–∫–æ–¥–æ–≤.\n\n"
            f"üåê –í–µ–±-–≤–µ—Ä—Å–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:\n{profile_url}"
        )
    
    db.close()

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
    photo = await update.message.photo[-1].get_file()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    photo_path = f"temp_{update.effective_user.id}.jpg"
    await photo.download_to_drive(photo_path)
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenCV
        image = cv2.imread(photo_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ QR-–∫–æ–¥
        decoded_objects = decode(gray)
        
        if not decoded_objects:
            await update.message.reply_text("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ QR-–∫–æ–¥–∞
        qr_data = decoded_objects[0].data.decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º QR-–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = SessionLocal()
        purchase = db.query(Purchase).filter(
            Purchase.qr_code == qr_data,
            Purchase.verified == False
        ).first()
        
        if not purchase:
            await update.message.reply_text("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π QR-–∫–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            db.close()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = db.query(User).filter(User.id == purchase.user_id).first()
        
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            db.close()
            return
        
        # –ü–æ–º–µ—á–∞–µ–º QR-–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        purchase.verified = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤
        if not purchase.is_free:
            user.purchases_count += 1
        else:
            user.total_free_hookahs += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π QR-–∫–æ–¥
        next_purchase_free = (user.purchases_count % 6 == 0)
        
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        message_text = (
            f"‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üéØ –¢–∏–ø: {'üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π' if purchase.is_free else 'üí∞ –û–±—ã—á–Ω—ã–π'} –∫–∞–ª—å—è–Ω\n"
            f"üìä –í—Å–µ–≥–æ –∫–∞–ª—å—è–Ω–æ–≤: {user.purchases_count}\n"
            f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user.total_free_hookahs}\n"
            f"üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ: {6 - (user.purchases_count % 6)}"
        )
        
        await update.message.reply_text(message_text)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = (
            f"‚úÖ –í–∞—à {'–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π' if purchase.is_free else '–æ–±—ã—á–Ω—ã–π'} QR-–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n"
            f"üìä –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {user.purchases_count} –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤\n"
            f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {user.total_free_hookahs}\n"
            f"üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ: {6 - (user.purchases_count % 6)}"
        )
        
        try:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text=user_message
            )
            
            # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–ª—å—è–Ω –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π QR-–∫–æ–¥
            if next_purchase_free:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π QR-–∫–æ–¥
                qr_code_data = generate_qr_code()
                new_purchase = Purchase(
                    user_id=user.id,
                    qr_code=qr_code_data,
                    is_free=True
                )
                db.add(new_purchase)
                db.commit()
                
                # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
                qr = qrcode.QRCode(version=1, box_size=10, border=5)
                qr.add_data(qr_code_data)
                qr.make(fit=True)
                qr_image = qr.make_image(fill_color="black", back_color="white")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
                bio = BytesIO()
                qr_image.save(bio, 'PNG')
                bio.seek(0)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω!"
                )
                await context.bot.send_photo(
                    chat_id=user.telegram_id,
                    photo=bio,
                    caption="üéÅ –í–∞—à QR-–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω"
                )
        
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        db.close()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(photo_path):
            os.remove(photo_path)

async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await update.message.reply_text(
        "üì∏ –î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞:\n\n"
        "1. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
        "3. –Ø –ø—Ä–æ–≤–µ—Ä—é QR-–∫–æ–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂—É –ø–æ–∫—É–ø–∫—É"
    )

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"–í–∞—à Telegram ID: {user.id}")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if not context.args:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:\n\n"
            "/broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/broadcast üéâ –ê–∫—Ü–∏—è! –°–µ–≥–æ–¥–Ω—è –≤—Å–µ –∫–∞–ª—å—è–Ω—ã -20%\n"
            "/broadcast ÔøΩÔøΩ –ù–æ–≤—ã–µ –≤–∫—É—Å—ã –≤ –º–µ–Ω—é Dungeon!\n"
            "/broadcast ‚ö°Ô∏è –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –≤ Dungeon: –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –∫–∞–ª—å—è–Ω–∞ - —á–∞–π –≤ –ø–æ–¥–∞—Ä–æ–∫"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = " ".join(context.args)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    db = SessionLocal()
    users = db.query(User).all()
    
    success_count = 0
    fail_count = 0
    
    await update.message.reply_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user in users:
        try:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text=f"üì¢ –ù–æ–≤–æ—Å—Ç—å –æ—Ç —Ç–∞–π–º –∫–∞—Ñ–µ Dungeon:\n\n{broadcast_text}",
                parse_mode='HTML'
            )
            success_count += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(0.1)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            fail_count += 1
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {fail_count}"
    )
    
    db.close()

async def check_free_hookah(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–∞—Ö"""
    db = SessionLocal()
    users = db.query(User).all()
    
    for user in users:
        remaining = 6 - (user.purchases_count % 6)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ QR-–∫–æ–¥–∞
        free_qr = db.query(Purchase).filter(
            Purchase.user_id == user.id,
            Purchase.is_free == True,
            Purchase.verified == False
        ).first()
        
        if free_qr:
            try:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text="üéÅ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –≤ —Ç–∞–π–º –∫–∞—Ñ–µ Dungeon!\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à QR-–∫–æ–¥."
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
        elif remaining <= 3:
            try:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üéØ –î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞ –≤ —Ç–∞–π–º –∫–∞—Ñ–µ Dungeon –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {remaining} {'–∫–∞–ª—å—è–Ω' if remaining == 1 else '–∫–∞–ª—å—è–Ω–∞' if remaining < 5 else '–∫–∞–ª—å—è–Ω–æ–≤'}!\n"
                         f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º —Å–Ω–æ–≤–∞ üòä"
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    
    db.close()

def generate_qr_code():
    # Generate random string for QR code
    letters_and_digits = string.ascii_letters + string.digits
    random_string = ''.join(random.choice(letters_and_digits) for i in range(20))
    return random_string

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Exception while handling an update: {context.error}")
    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    logger.info("Starting bot initialization...")
    
    if not TOKEN:
        logger.error("No token provided!")
        return

    try:
        logger.info("Building application...")
        application = Application.builder().token(TOKEN).build()

        # Add handlers
        logger.info("Adding handlers...")
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("status", status))
        application.add_handler(CommandHandler("profile", profile))
        application.add_handler(CommandHandler("scan", scan))
        application.add_handler(CommandHandler("generate", generate))
        application.add_handler(CommandHandler("myid", get_my_id))
        application.add_handler(CommandHandler("broadcast", broadcast))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤
        logger.info("Setting up job queue...")
        job_queue = application.job_queue
        job_queue.run_repeating(check_free_hookah, interval=86400)
        
        # Add error handler
        application.add_error_handler(error_handler)

        logger.info("Starting polling...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Error during bot initialization: {e}", exc_info=True)

if __name__ == '__main__':
    logger.info("Bot script started")
    main() 